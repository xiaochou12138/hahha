
#pragma once
#include"ShapeDlg.h"





enum ElementType { NOTSET, SQUARE, RECTANGLE, CIRCLE, ELLIPSE, TRIANGLE, TEXT };

class CShape : public CObject
{
public:

	CShape(ShapeDlg& ShapeDlg);
	CShape();
	virtual ~CShape();
	virtual void Draw(CDC*pDC) = 0;//绘制图元
	virtual bool IsMatched(CPoint pnt) = 0;//点是否落在图形内部
	virtual void Serialize(CArchive& ar) = 0;
	ElementType Type;//图元类型
	CSize pot;
	int OrgX;//原点坐标
	int OrgY;
	COLORREF   BorderColor;//边界颜色
	int BorderType;//边界线型--实线、虚线、虚点线等
	int BorderWidth;//边界宽度
	COLORREF  FillColor;//填充颜色
	int FillType;//填充类型--实心、双对角、十字交叉等
public:
	void setpen(ShapeDlg& shuxing);
	void getpen(ShapeDlg& shuxing);
	virtual void getshapevalue(ShapeDlg& shuxing) = 0;
	virtual void setshapevalue(ShapeDlg& shuxing) = 0;
};

// CShape


//正方形类CSquare
class CSquare : public CShape
{
public:
	CSquare();

	void Draw(CDC*pDC);//绘制正方形
	bool IsMatched(CPoint pnt);//重载点pnt是否落在图元内
	virtual void Serialize(CArchive& ar);//序列化正方形图元
	
	void getshapevalue(ShapeDlg& shuxing) ;
	void setshapevalue(ShapeDlg& shuxing);
private:
	int width;

	DECLARE_SERIAL(CSquare)//声明类CSquare支持序列化
};
//矩形类
class CRectangle : public CShape
{
public:
	CRectangle();

	void Draw(CDC*pDC);//绘制
	bool IsMatched(CPoint pnt);//重载点pnt是否落在图元内
	virtual void Serialize(CArchive& ar);//序列化矩形图元
	/*void setshapevalue(ShapeDlg& shuxing,CPoint pnt);*/
	void getshapevalue(ShapeDlg& shuxing) ;
	void setshapevalue(ShapeDlg& shuxing);
private:
	int width;
	int hight;
	DECLARE_SERIAL(CRectangle)//声明类CRectangle支持序列化
};
//圆类
class CCircle : public CShape
{
public:
	CCircle();

	void Draw(CDC*pDC);//绘制
	bool IsMatched(CPoint pnt);//重载点pnt是否落在图元内
	virtual void Serialize(CArchive& ar);//序列化圆形图元
	//void setshapevalue(ShapeDlg& shuxing,CPoint pnt);
	void getshapevalue(ShapeDlg& shuxing) ;
	void setshapevalue(ShapeDlg& shuxing);
private:
	int radius;
	DECLARE_SERIAL(CCircle)//声明类CCircle支持序列化
};
//椭圆类
class CEllipse : public CShape
{
public:
	CEllipse();

	void Draw(CDC*pDC);//绘制
	bool IsMatched(CPoint pnt);//重载点pnt是否落在图元内
	virtual void Serialize(CArchive& ar);//序列化椭圆形图元
	/*void setshapevalue(ShapeDlg& shuxing,CPoint pnt);*/
	void getshapevalue(ShapeDlg& shuxing) ;
	void setshapevalue(ShapeDlg& shuxing);
private:
	int width;
	int hight;


	DECLARE_SERIAL(CEllipse)//声明类CEllipse支持序列化
};
//三角形类
class CTriangle : public CShape
{
public:
	CTriangle();
	CTriangle(ShapeDlg & m_a);
	void Draw(CDC*pDC);//绘制
	bool IsMatched(CPoint pnt);//重载点pnt是否落在图元内
	virtual void Serialize(CArchive& ar);//序列化三角形图元
	/*void setshapevalue(ShapeDlg& shuxing,CPoint pnt);*/
	void getshapevalue(ShapeDlg& shuxing) ;
	void setshapevalue(ShapeDlg& shuxing);
private:
	int width;//边长


	DECLARE_SERIAL(CTriangle)//声明类CTriangle 支持序列化
};
//文字类
class CText : public CShape
{
public:
	CText();
	void Draw(CDC*pDC);//绘制
	bool IsMatched(CPoint pnt);//重载点pnt是否落在图元内
	virtual void Serialize(CArchive& ar);//序列化矩形图元
	/*void setshapevalue(ShapeDlg& shuxing,CPoint pnt);*/
	void getshapevalue(ShapeDlg& shuxing) ;
	void setshapevalue(ShapeDlg& shuxing);
private:
	int hight;
	int angle;
	CString text;
	DECLARE_SERIAL(CText)//声明类CText支持序列化
};
